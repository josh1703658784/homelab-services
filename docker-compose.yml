---

# notes
# ports are exposed to the host machine
# exposed only allows access by linked services
#
# EXAMPLE DEPLOYS
# https://gist.github.com/Webreaper/81ecda3ecc45fa61a16dfc90cfc4550d
# EXAMPLE DEPLOYS

# CAP_ADD/DROP information: http://rhelblog.redhat.com/2016/10/17/secure-your-containers-with-this-one-weird-trick/

# @TODO: wireguard, flexget, git server, backblaze, anonaddy
# @TODO review these https://teddit.net/r/radarr/comments/hbwnb2/a_list_of_all_companion_tools_and_software/
# @TODO actually restrict networks
# @TODO try https://dockersl.im

# p2p related apps: https://teddit.net/r/radarr/comments/hbwnb2/a_list_of_all_companion_tools_and_software/
#


version: "2.4"

services:



  proxy:
    # @TODO split into two containers: https://github.com/nginx-proxy/nginx-proxy#separate-containers
    image: jwilder/nginx-proxy:alpine # alpine latest image
    read_only: true
    tmpfs:
      - /etc/nginx/dhparam/
      - /var/cache/nginx/client_temp/
      - /var/cache/nginx/proxy_temp/
      - /var/cache/nginx/fastcgi_temp/
      - /var/cache/nginx/uwsgi_temp/
      - /var/cache/nginx/scgi_temp/
      - /var/run/
      - /etc/nginx/conf.d/
      - /etc/nginx/certs/
    cap_drop:
      - all
    cap_add:
      - net_bind_service # for access to port 80 (<1024)
      - chown # @TODO fix this in forked dockerfile
      - setgid # @TODO fix this in forked dockerfile
      - setuid  # @TODO fix this in forked dockerfile
    environment:
      - NETWORK_ACCESS=internal
      - DEFAULT_HOST=whoami.erdos.local
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro


  whoami:
    # alpine
    image: "jwilder/whoami:latest"
    read_only: true
    cap_drop:
      - all
    read_only: true
    expose:
      - 8000
    user: nobody
    environment:
      - NETWORK_ACCESS=internal
      - VIRTUAL_HOST=whoami.erdos.local,whoami.erdos.remote
      - VIRTUAL_PORT=8000


  movies:
    # @TODO FORK DOCERFILE AND MAKE BASH SCRIPTS STRICT FOR QUICK FAILURE
    image: haugene/transmission-openvpn
    cap_drop:
      - ALL
    cap_add:
      - net_admin     # DOCUMENTED REQUIREMENT
      - mknod         # ALLOWS CREATION OF TUN/TAP IN /dev/net/tun
      - net_raw       # FOR PING IN HEALTHCHECK
      - setgid        # @TODO REVOLVE THIS WITH A FORKED DOCKERFILE
      - dac_override  # @TODO HIGH VULN, FIX WITH FORKED DOCKERFILE
        #read_only: true
    volumes:
      - type: bind
        source: /volume1/data/docker/apps/transmission-movies/data/watch
        target: /data/watch
        read_only: true
      - type: bind
        source: /volume1/data/docker/apps/transmission-movies/data/completed
        target: /data/completed
        read_only: false
      - type: bind
        source: /volume1/data/docker/apps/transmission-movies/data/incomplete
        target: /data/incomplete
        read_only: false
      - type: bind
        source: /volume1/data/docker/apps/transmission-movies/data/transmission-home
        target: /data/transmission-home
        read_only: false
      - type: bind
        source: /volume1/data/docker/apps/vpn/config/openvpn-pre-start.sh
        target: /scripts/openvpn-pre-start.sh
        read_only: true
      - type: bind
        source: /volume1/data/docker/apps/vpn/config/mullvad_userpass.txt
        target: /config/openvpn-credentials.txt
        read_only: true
      - type: bind
        source: /volume1/data/docker/apps/vpn/config/mullvad_ch_zrh.ovpn
        target: /readonly_vpn_config.ovpn
        read_only: true
    environment:
      - NETWORK_ACCESS=internal
      - VIRTUAL_HOST=movies.erdos.local,movieswatcher.erdos.local,movies.erdos.remote
      - VIRTUAL_PORT=9091
      - OPENVPN_PROVIDER=custom
      - OPENVPN_CONFIG=vpn_config
      - LOCAL_NETWORK=192.168.12.0/24
      - TRANSMISSION_PEER_PORT=54839
      - TRANSMISSION_PORT_FORWARDING_ENABLED=true
      - TRANSMISSION_ENCRYPTION=1 # prefer encrypted connections but not required
      - TRANSMISSION_PREFETCH_ENABLED=true
      - DROP_DEFAULT_ROUTE=true # maybe works, maybe breaks
      - LOG_TO_STDOUT=true
      - S6_READ_ONLY_ROOT=1
    restart: always
    expose:
      - 9091
    sysctls:
      - "net.ipv6.conf.all.disable_ipv6=0"


  tv:
    image: haugene/transmission-openvpn
    cap_drop:
      - ALL
    cap_add:
      - net_admin     # DOCUMENTED REQUIREMENT
      - mknod         # ALLOWS CREATION OF TUN/TAP IN /dev/net/tun
      - net_raw       # FOR PING IN HEALTHCHECK
      - setgid        # @TODO REVOLVE THIS WITH A FORKED DOCKERFILE
      - dac_override  # @TODO HIGH VULN, FIX WITH FORKED DOCKERFILE
    tmpfs:
      - /tmp
    restart: always
    volumes:
      - /volume1/data/docker/apps/transmission-tv/data/watch:/data/watch
      - /volume1/data/docker/apps/transmission-tv/data/completed:/data/completed
      - /volume1/data/docker/apps/transmission-tv/data/incomplete:/data/incomplete
      - /volume1/data/docker/apps/transmission-tv/data/transmission-home:/data/transmission-home
      # > openvpn-pre-start.sh copies the on-disk readonly openvpn config to a directory where it is modified
      # > by this container/service. It is not desirable to have these changes written back to disk.
      # > I much prefer having the modifications done from a pristine config every time
      - /volume1/data/docker/apps/vpn/config/openvpn-pre-start.sh:/scripts/openvpn-pre-start.sh:ro
      - /volume1/data/docker/apps/vpn/config/mullvad_userpass.txt:/config/openvpn-credentials.txt:ro
      - /volume1/data/docker/apps/vpn/config/mullvad_ch_zrh.ovpn:/readonly_vpn_config.ovpn:ro
    environment:
      - NETWORK_ACCESS=internal
      - VIRTUAL_HOST=tv.erdos.local,tvdownload.erdos.local,tv.erdos.remote
      - VIRTUAL_PORT=9091
      - OPENVPN_PROVIDER=custom
      - OPENVPN_CONFIG=vpn_config
      - LOCAL_NETWORK=192.168.12.0/24
      - TRANSMISSION_PEER_PORT=56004
      - TRANSMISSION_PORT_FORWARDING_ENABLED=true
      - TRANSMISSION_ENCRYPTION=1 # prefer encrypted connections but not required
      - TRANSMISSION_PREFETCH_ENABLED=true
      - DROP_DEFAULT_ROUTE=true # maybe works, maybe breaks
      - LOG_TO_STDOUT=true
    expose:
      - 9091
    sysctls:
      - "net.ipv6.conf.all.disable_ipv6=0"

  # media player
  # @TODO try to put this in bridge networking?
  plex:
    #container_name: plex
    image: lscr.io/linuxserver/plex:latest
    network_mode: host
    environment:
      - NETWORK_ACCESS=internal
      - PUID=1026
      - PGID=100
      - VERSION=docker
      - ADVERTISE_IP=http://192.168.12.184:32400/
    volumes:
      - /volume1/data/docker/apps/plex/config:/config
      - /volume1/data/docker/apps/transmission-tv/data/completed:/tv:ro
      - /volume1/data/docker/apps/transmission-movies/data/completed:/movies:ro
    tmpfs:
      - /var/run/s6:exec
      - /app
      - /defaults


  # Manages your movie library
  # @TODO pin down basic hardening
  # movie
  movie-watcher:
    image: lscr.io/linuxserver/radarr:latest
    #read_only: true
    tmpfs:
      - /var/run/s6:exec,rw
    cap_drop:
      - all
    cap_add:
      - setgid        # @TODO REVOLVE THIS WITH A FORKED DOCKERFILE
      - setuid
      - chown # @TODO fix this in forked dockerfile
    environment:
      - S6_READ_ONLY_ROOT=1
      - S6_BEHAVIOUR_IF_STAGE2_FAILS=2
      - NETWORK_ACCESS=internal
      - PUID=1026
      - PGID=100
      - TZ=Europe/London
      - VIRTUAL_HOST=radarr.erdos.local,moviewatcher.erdos.local,radarr.erdos.remote
      - VIRTUAL_PORT=7878
    volumes:
      - /volume1/data/docker/apps/radarr/config:/config
      - /volume1/data/docker/apps/transmission-movies/media:/movies:ro
      - /volume1/data/docker/apps/transmission-movies/data/completed:/data/completed # mount download client movies here: documented in the UI
    expose:
      - 7878 
    restart: unless-stopped


  # Manages your TV library
  # sonarr
  tv-watcher:
    image: lscr.io/linuxserver/sonarr:latest
    cap_drop:
      - all
    cap_add:
      - setgid
      - setuid
      - chown
    tmpfs:
      - /var/run/s6:exec,rw
    environment:
      - S6_READ_ONLY_ROOT=1
      - NETWORK_ACCESS=internal
      - PUID=1026
      - PGID=100
      - TZ=Europe/London
      - VIRTUAL_HOST=sonarr.erdos.local,tvwatcher.erdos.local,sonarr.erdos.remote,tvwatcher.erdos.remote
      - VIRTUAL_PORT=8989
    volumes:
      - /volume1/data/docker/apps/sonarr/config:/config
        #- /volume1/data/docker/apps/transmission-tv/media:/tv:ro
      - /volume1/data/docker/apps/transmission-tv/media-organized:/media-organized
      - /volume1/data/docker/apps/transmission-tv/data/completed:/data/completed
    expose:
      - 8989
    restart: unless-stopped


  # jackett
  # feed reader
  feed-reader:
    image: lscr.io/linuxserver/jackett:latest
    #container_name: jackett
    cap_drop:
      - all
    cap_add:
      - setgid
      - setuid
      - chown
    tmpfs:
      - /var/run/s6:exec,rw
    volumes:
      - /volume1/data/docker/apps/jackett/config:/config
      - /volume1/data/docker/apps/jackett/downloads_blackhole:/downloads # idk it's in the docs, find out what this is for later
      # ^^^ https://docs.linuxserver.io/images/docker-jackett#usage ^^^
    environment:
      - S6_READ_ONLY_ROOT=1
      - NETWORK_ACCESS=internal
      - PUID=1026
      - PGID=100
      - TZ=Europe/London
      - AUTO_UPDATE=true #optional
      - VIRTUAL_HOST=jackett.erdos.local,feed.erdos.local,jackett.erdos.remote,feed.erdos.remote
      - VIRTUAL_PORT=9117
    expose: 
      - 9117


  # bazarr
  # find subtitles
  subtitles:
    image: lscr.io/linuxserver/bazarr:latest
    #container_name: bazarr
    environment:
      - NETWORK_ACCESS=internal
      - PUID=1026
      - PGID=100
      - TZ=Europe/London
      - VIRTUAL_HOST=bazarr.erdos.local,subtitles.erdos.local,bazarr.erdos.remote
      - VIRTUAL_PORT=6767
    cap_drop:
      - all
    cap_add:
      - setgid
      - setuid
      - chown
    volumes:
      - /volume1/data/docker/apps/bazarr/config:/config
      - /volume1/data/docker/apps/transmission-tv/data/completed:/tv:ro
      - /volume1/data/docker/apps/transmission-movies/data/completed:/movies:ro
    expose:
      - 6767
    restart: always


  # ombi
  requests:
    #image: lscr.io/linuxserver/ombi
    image: linuxserver/ombi:latest
    #container_name: ombi
    cap_drop:
      - all
    cap_add:
      - setgid
      - setuid
      - chown
    environment:
      - NETWORK_ACCESS=internal
      - PUID=1026
      - PGID=100
      - TZ=Europe/London
        #- BASE_URL=/ombi #optional
      - VIRTUAL_HOST=ombi.erdos.local,requests.erdos.local,ombi.erdos.remote
      - VIRTUAL_PORT=3579
      - BASE_URL=/ombi #optional
    volumes:
      - /volume1/data/docker/apps/ombi/config:/config
    expose: 
      - 3579
    restart: unless-stopped




volumes:
  # transmission-*
  copy_openvpn_config:

    ## transmission-movies
    #dockerfile-transmission-movies-data:
    #dockerfile-transmission-movies-config:

    ## transmission-tv
    #dockerfile-transmission-tv-data:
    #dockerfile-transmission-tv-config:

  #transmission-tv-downloads-incomplete:
  #transmission-books-downloads-incomplete:

  #transmission-vpn-movies-downloads-incomplete:
  #transmission-vpn-tv-downloads-incomplete:

  #nginx_confd:


  ## BOBARR
  #web_build:
  #api_build:
  #api_node_modules:
  #web_node_modules:
  #db_data:
  #redis_data:
  ## BOBARR

  #  #networks:
  #  #  vpn:
